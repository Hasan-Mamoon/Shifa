{
  "numFailedTestSuites": 0,
  "numFailedTests": 0,
  "numPassedTestSuites": 6,
  "numPassedTests": 62,
  "numPendingTestSuites": 0,
  "numPendingTests": 0,
  "numRuntimeErrorTestSuites": 0,
  "numTodoTests": 0,
  "numTotalTestSuites": 6,
  "numTotalTests": 62,
  "openHandles": [],
  "snapshot": {
    "added": 0,
    "didUpdate": false,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0
  },
  "startTime": 1747228461799,
  "success": true,
  "testResults": [
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Admin Routes", "POST /admin/login"],
          "duration": 152,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Admin Routes POST /admin/login should login with default admin credentials",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should login with default admin credentials"
        },
        {
          "ancestorTitles": ["Admin Routes", "POST /admin/login"],
          "duration": 291,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Admin Routes POST /admin/login should login with database admin credentials",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should login with database admin credentials"
        },
        {
          "ancestorTitles": ["Admin Routes", "POST /admin/login"],
          "duration": 63,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Admin Routes POST /admin/login should reject invalid credentials",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should reject invalid credentials"
        },
        {
          "ancestorTitles": ["Admin Routes", "GET /admin/count"],
          "duration": 345,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Admin Routes GET /admin/count should return correct doctor and patient counts",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return correct doctor and patient counts"
        },
        {
          "ancestorTitles": ["Admin Routes", "GET /admin/count"],
          "duration": 64,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Admin Routes GET /admin/count should handle empty database",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle empty database"
        },
        {
          "ancestorTitles": ["Admin Routes", "GET /admin/pending-doctors"],
          "duration": 103,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Admin Routes GET /admin/pending-doctors should return list of pending doctors",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should return list of pending doctors"
        },
        {
          "ancestorTitles": ["Admin Routes", "GET /admin/pending-doctors"],
          "duration": 108,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Admin Routes GET /admin/pending-doctors should return empty array when no pending doctors",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return empty array when no pending doctors"
        },
        {
          "ancestorTitles": ["Admin Routes", "PUT /admin/update-doctor-status/:id"],
          "duration": 81,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Admin Routes PUT /admin/update-doctor-status/:id should approve a pending doctor",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "should approve a pending doctor"
        },
        {
          "ancestorTitles": ["Admin Routes", "PUT /admin/update-doctor-status/:id"],
          "duration": 67,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Admin Routes PUT /admin/update-doctor-status/:id should reject a pending doctor",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should reject a pending doctor"
        },
        {
          "ancestorTitles": ["Admin Routes", "PUT /admin/update-doctor-status/:id"],
          "duration": 50,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Admin Routes PUT /admin/update-doctor-status/:id should handle non-existent doctor ID",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle non-existent doctor ID"
        },
        {
          "ancestorTitles": ["Admin Routes", "POST /admin/apply-discount"],
          "duration": 84,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Admin Routes POST /admin/apply-discount should apply discount to all doctors fees",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should apply discount to all doctors fees"
        },
        {
          "ancestorTitles": ["Admin Routes", "POST /admin/apply-discount"],
          "duration": 51,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Admin Routes POST /admin/apply-discount should handle invalid discount percentage",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle invalid discount percentage"
        },
        {
          "ancestorTitles": ["Admin Routes", "POST /admin/remove-discount"],
          "duration": 79,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Admin Routes POST /admin/remove-discount should remove discount and restore original fees",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "should remove discount and restore original fees"
        }
      ],
      "endTime": 1747228465231,
      "message": "",
      "name": "/home/hassan/tempfyp/temp/Shifa/backend/__tests__/admin.test.js",
      "startTime": 1747228461840,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Doctor Routes", "POST /doctor/login"],
          "duration": 347,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Doctor Routes POST /doctor/login should login successfully with correct credentials",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "should login successfully with correct credentials"
        },
        {
          "ancestorTitles": ["Doctor Routes", "POST /doctor/login"],
          "duration": 240,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Doctor Routes POST /doctor/login should not login with incorrect password",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should not login with incorrect password"
        },
        {
          "ancestorTitles": ["Doctor Routes", "GET /doctor/get-doctor"],
          "duration": 194,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Doctor Routes GET /doctor/get-doctor should get doctor profile with valid email",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should get doctor profile with valid email"
        },
        {
          "ancestorTitles": ["Doctor Routes", "GET /doctor/doctors-all"],
          "duration": 164,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Doctor Routes GET /doctor/doctors-all should get all doctors",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should get all doctors"
        },
        {
          "ancestorTitles": ["Doctor Routes", "POST /doctor/add-doctor"],
          "duration": 2458,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Doctor Routes POST /doctor/add-doctor should successfully register a new doctor",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully register a new doctor"
        },
        {
          "ancestorTitles": ["Doctor Routes", "POST /doctor/add-doctor"],
          "duration": 74,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Doctor Routes POST /doctor/add-doctor should not register a doctor with invalid address format",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should not register a doctor with invalid address format"
        },
        {
          "ancestorTitles": ["Doctor Routes", "POST /doctor/add-doctor"],
          "duration": 67,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Doctor Routes POST /doctor/add-doctor should not register a doctor without image",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should not register a doctor without image"
        },
        {
          "ancestorTitles": ["Doctor Routes", "POST /doctor/add-doctor"],
          "duration": 67,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Doctor Routes POST /doctor/add-doctor should not register a doctor without degree",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should not register a doctor without degree"
        },
        {
          "ancestorTitles": ["Doctor Routes", "POST /doctor/add-doctor"],
          "duration": 1516,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Doctor Routes POST /doctor/add-doctor should hash the password before storing",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should hash the password before storing"
        },
        {
          "ancestorTitles": ["Doctor Routes", "POST /doctor/add-doctor"],
          "duration": 75,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Doctor Routes POST /doctor/add-doctor should not register a doctor with missing required fields",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should not register a doctor with missing required fields"
        }
      ],
      "endTime": 1747228471476,
      "message": "",
      "name": "/home/hassan/tempfyp/temp/Shifa/backend/__tests__/doctor.test.js",
      "startTime": 1747228465240,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Blog Routes", "POST /blog/add-blog"],
          "duration": 1786,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Blog Routes POST /blog/add-blog should create a new blog post",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should create a new blog post"
        },
        {
          "ancestorTitles": ["Blog Routes", "POST /blog/add-blog"],
          "duration": 265,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Blog Routes POST /blog/add-blog should not create blog without image",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should not create blog without image"
        },
        {
          "ancestorTitles": ["Blog Routes", "GET /blog/blogs"],
          "duration": 267,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Blog Routes GET /blog/blogs should get all blog posts",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should get all blog posts"
        },
        {
          "ancestorTitles": ["Blog Routes", "GET /blog/blogs"],
          "duration": 255,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Blog Routes GET /blog/blogs should filter blog posts by category",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should filter blog posts by category"
        },
        {
          "ancestorTitles": ["Blog Routes", "GET /blog/blogs"],
          "duration": 250,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Blog Routes GET /blog/blogs should return empty array for non-existent category",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return empty array for non-existent category"
        },
        {
          "ancestorTitles": ["Blog Routes", "GET /blog/blogs/:id"],
          "duration": 278,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Blog Routes GET /blog/blogs/:id should get a specific blog post",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should get a specific blog post"
        },
        {
          "ancestorTitles": ["Blog Routes", "GET /blog/blogs/:id"],
          "duration": 245,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Blog Routes GET /blog/blogs/:id should return 404 for non-existent blog post",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 404 for non-existent blog post"
        },
        {
          "ancestorTitles": ["Blog Routes", "PUT /blog/update-blog/:id"],
          "duration": 793,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Blog Routes PUT /blog/update-blog/:id should update a blog post",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "should update a blog post"
        },
        {
          "ancestorTitles": ["Blog Routes", "PUT /blog/update-blog/:id"],
          "duration": 249,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Blog Routes PUT /blog/update-blog/:id should not update blog with wrong author",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should not update blog with wrong author"
        },
        {
          "ancestorTitles": ["Blog Routes", "DELETE /blog/delete-blog/:id"],
          "duration": 546,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Blog Routes DELETE /blog/delete-blog/:id should delete a blog post",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should delete a blog post"
        },
        {
          "ancestorTitles": ["Blog Routes", "DELETE /blog/delete-blog/:id"],
          "duration": 253,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Blog Routes DELETE /blog/delete-blog/:id should not delete blog with wrong author",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should not delete blog with wrong author"
        },
        {
          "ancestorTitles": ["Blog Routes", "DELETE /blog/delete-blog/:id"],
          "duration": 247,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Blog Routes DELETE /blog/delete-blog/:id should return 404 for non-existent blog",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 404 for non-existent blog"
        }
      ],
      "endTime": 1747228478153,
      "message": "",
      "name": "/home/hassan/tempfyp/temp/Shifa/backend/__tests__/blog.test.js",
      "startTime": 1747228471481,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Appointment Routes", "POST /appointment/book-appointment"],
          "duration": 551,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Appointment Routes POST /appointment/book-appointment should not book appointment without session ID",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should not book appointment without session ID"
        },
        {
          "ancestorTitles": ["Appointment Routes", "GET /appointment/appointments"],
          "duration": 607,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Appointment Routes GET /appointment/appointments should get all appointments for a user",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should get all appointments for a user"
        },
        {
          "ancestorTitles": ["Appointment Routes", "GET /appointment/appointments"],
          "duration": 416,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Appointment Routes GET /appointment/appointments should return 400 if userId is not provided",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 400 if userId is not provided"
        },
        {
          "ancestorTitles": ["Appointment Routes", "PATCH /appointment/:appointmentId"],
          "duration": 477,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Appointment Routes PATCH /appointment/:appointmentId should cancel an appointment",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should cancel an appointment"
        },
        {
          "ancestorTitles": ["Appointment Routes", "PATCH /appointment/:appointmentId"],
          "duration": 430,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Appointment Routes PATCH /appointment/:appointmentId should not cancel non-existent appointment",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should not cancel non-existent appointment"
        },
        {
          "ancestorTitles": ["Appointment Routes", "DELETE /appointment/:appointmentId"],
          "duration": 466,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Appointment Routes DELETE /appointment/:appointmentId should delete an appointment and update slot",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should delete an appointment and update slot"
        },
        {
          "ancestorTitles": ["Appointment Routes", "DELETE /appointment/:appointmentId"],
          "duration": 449,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Appointment Routes DELETE /appointment/:appointmentId should not delete non-existent appointment",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should not delete non-existent appointment"
        }
      ],
      "endTime": 1747228482640,
      "message": "",
      "name": "/home/hassan/tempfyp/temp/Shifa/backend/__tests__/appointment.test.js",
      "startTime": 1747228478159,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Calendar Routes", "GET /"],
          "duration": 128,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Calendar Routes GET / should get all events for a given month range",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should get all events for a given month range"
        },
        {
          "ancestorTitles": ["Calendar Routes", "GET /"],
          "duration": 52,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Calendar Routes GET / should handle invalid date range",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle invalid date range"
        },
        {
          "ancestorTitles": ["Calendar Routes", "GET /"],
          "duration": 49,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Calendar Routes GET / should return empty array when no events in range",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return empty array when no events in range"
        },
        {
          "ancestorTitles": ["Calendar Routes", "GET /:date"],
          "duration": 68,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Calendar Routes GET /:date should get events for a specific date",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should get events for a specific date"
        },
        {
          "ancestorTitles": ["Calendar Routes", "GET /:date"],
          "duration": 49,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Calendar Routes GET /:date should return empty array for date with no events",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return empty array for date with no events"
        },
        {
          "ancestorTitles": ["Calendar Routes", "GET /:date"],
          "duration": 48,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Calendar Routes GET /:date should handle invalid date format",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle invalid date format"
        },
        {
          "ancestorTitles": ["Calendar Routes", "POST /"],
          "duration": 74,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Calendar Routes POST / should create a new event",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "should create a new event"
        },
        {
          "ancestorTitles": ["Calendar Routes", "POST /"],
          "duration": 52,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Calendar Routes POST / should validate required fields",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should validate required fields"
        },
        {
          "ancestorTitles": ["Calendar Routes", "POST /"],
          "duration": 71,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Calendar Routes POST / should handle invalid date format",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle invalid date format"
        },
        {
          "ancestorTitles": ["Calendar Routes", "POST /"],
          "duration": 47,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Calendar Routes POST / should handle empty request body",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle empty request body"
        },
        {
          "ancestorTitles": ["Calendar Routes", "DELETE /:id"],
          "duration": 60,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Calendar Routes DELETE /:id should delete an existing event",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should delete an existing event"
        },
        {
          "ancestorTitles": ["Calendar Routes", "DELETE /:id"],
          "duration": 47,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Calendar Routes DELETE /:id should handle non-existent event ID",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle non-existent event ID"
        },
        {
          "ancestorTitles": ["Calendar Routes", "DELETE /:id"],
          "duration": 43,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Calendar Routes DELETE /:id should handle invalid event ID format",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle invalid event ID format"
        },
        {
          "ancestorTitles": ["Calendar Routes", "DELETE /:id"],
          "duration": 63,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Calendar Routes DELETE /:id should handle empty ID parameter",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle empty ID parameter"
        }
      ],
      "endTime": 1747228484729,
      "message": "",
      "name": "/home/hassan/tempfyp/temp/Shifa/backend/__tests__/calendar.test.js",
      "startTime": 1747228482645,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Patient Routes", "POST /patient/add-patient"],
          "duration": 1894,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Patient Routes POST /patient/add-patient should register a new patient successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should register a new patient successfully"
        },
        {
          "ancestorTitles": ["Patient Routes", "POST /patient/add-patient"],
          "duration": 254,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Patient Routes POST /patient/add-patient should not register a patient with duplicate email",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should not register a patient with duplicate email"
        },
        {
          "ancestorTitles": ["Patient Routes", "POST /patient/add-patient"],
          "duration": 67,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Patient Routes POST /patient/add-patient should return error for missing required fields",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return error for missing required fields"
        },
        {
          "ancestorTitles": ["Patient Routes", "POST /patient/login"],
          "duration": 274,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Patient Routes POST /patient/login should login with correct credentials",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should login with correct credentials"
        },
        {
          "ancestorTitles": ["Patient Routes", "POST /patient/login"],
          "duration": 245,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Patient Routes POST /patient/login should fail login with incorrect password",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail login with incorrect password"
        },
        {
          "ancestorTitles": ["Patient Routes", "POST /patient/login"],
          "duration": 155,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Patient Routes POST /patient/login should fail login with unregistered email",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail login with unregistered email"
        }
      ],
      "endTime": 1747228488847,
      "message": "",
      "name": "/home/hassan/tempfyp/temp/Shifa/backend/__tests__/patient.test.js",
      "startTime": 1747228484735,
      "status": "passed",
      "summary": ""
    }
  ],
  "wasInterrupted": false
}
